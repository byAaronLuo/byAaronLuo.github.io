<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[安装并破解office]]></title>
    <url>%2F2018%2F07%2F06%2Ftext-3%2F</url>
    <content type="text"><![CDATA[如何安装office2016并免费破解首先在msdn里找到office2016 msdn官网按照如图选择office2016然后点击详细信息，复制ed2k整个一长串链接复制完之后打开迅雷直接下载(下载的源文件是一个镜像)直接解压这个镜像找到里面的setup.exe安装完成之后在桌面空白处点击鼠标右键新建文件夹里就有office包括的Word，Excel，PowerPoint等等办公软件 破解office下载KMSpico_Install(这里我会给大家工具)简单介绍，这个工具可以激活window，office点击运行exe文件个人建议就放在他的默认文件C盘如果有的人之前用过这个软件激活window，那就在控制面板里找到程序与功能，卸载KMSpico_setup再安装注：安装过程中会出现进度条都已经完成了，但是没有响应，请不要强制关闭，等待自动关闭KM工具联系QQ：1071843726]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在vue上使用sass]]></title>
    <url>%2F2018%2F06%2F27%2Ftest-2%2F</url>
    <content type="text"><![CDATA[如何安装SassSass、gem安装教程当安装完成后在终端输入1sass -v 如下sass常用更新、查看版本、帮助等命令12345678// 更新sassgem update sass//查看版本sass -v//查看sass帮助sass -h 如何在vue.js中安装sass的依赖的两种方法1. 在当前项目的目录下引入123cnpm install sass-loader -Dcnpm install node-sass -D 引入完成之后在package.json中会有如下两个依赖“node-sass”: “^4.9.0”,“sass-loader”: “^7.0.3”,这样这个项目就配置好了sass 如果运行项目之后不能使用sass那么就在webpack.base.conf.js中的module：的rules：[ ] 下添加：12345678910&#123; test: /\.vue$/, loader: &apos;vue-loader&apos;, options: &#123; loaders: &#123; scss: &apos;style-loader!css-loader!sass-loader&apos;, sass: &apos;style-loader!css-loader!sass-loader?indentedSyntax&apos;, &#125;, &#125;, &#125;, 2. 官方Sass Loader的引入方法sass Loade官方仓库]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>-sass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery配合vue.js注册锚点实现动画过渡效果]]></title>
    <url>%2F2018%2F06%2F23%2Ftext-1%2F</url>
    <content type="text"><![CDATA[问题：如何利用jQuery实现网页导航栏注册锚点并有过渡效果引言：jquery库 - 特性jQuery 是一个 JavaScript 函数库。 jQuery 库包含以下特性： HTML 元素选取 HTML 元素操作 CSS 操作 HTML 事件函数 JavaScript 特效和动画 HTML DOM 遍历和修改 AJAX Utilities 为什么要实现点击导航栏到当前组件要有过渡效果：目前大多数官网首页都是各种炫酷的动画，如果仅仅只是在a标签的herf里添加#id,然后在组件里添加id，虽然会实现到滑到页面，但是是真的丑陋至极，毫无违和感，而且当你刷新的时候会自动在你的路由下添加一个路径，然后就出现空白，着实很烦。如何实现： 利用vue.js和jQuery，因为vue.js写好组件然后通过组件直接显示页面这样各个组件不会相互干扰。 在vue.js 里配置jQuery 和bootstrap（由于我需要bootstrap 做响应式布局这里我也介绍吧）jQuery 引用 第一步1cnpm install jquery --save 第二步在build/webpack.base.conf.js里加入1var webpack = require(&quot;webpack&quot;) 第三步同样build/webpack.base.conf.js中在module.exports的最后加入1234567plugins: [ new webpack.optimize.CommonsChunkPlugin(&apos;common.js&apos;), new webpack.ProvidePlugin(&#123; jQuery: &quot;jquery&quot;, $: &quot;jquery&quot; &#125;) ], 第四步在main.js 引入import $ from ‘jquery’1import $ from &apos;jquery&apos; 第五步重启本地服务器1cnpm run dev bootstrap引用第一步1cnpm install bootstrap --save 第二步在main.js中直接引入 12import &apos;../node_modules/bootstrap/dist/css/bootstrap.min.css&apos;;import &apos;../node_modules/bootstrap/dist/js/bootstrap.min.js&apos;; 第三步1cnpm run dev 代码12345678910111213141516171819202122HTML:&lt;ul class=&quot;nav navbar-nav ul_class_after&quot; v-for=&quot;(item,index) in navigation&quot;&gt; &lt;li&gt; &lt;a href=&quot;#&quot; class = &quot;a_class_jump&quot; @click=&quot;jump(item.item)&quot;&gt;&#123;&#123;item.item&#125;&#125;&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;About id=&quot;About&quot;&gt;&lt;/About&gt;&lt;div id = &quot;Services&quot; style=&quot;height: 1000px&quot;&gt;2222&lt;/div&gt;js:jump(item)&#123; var top = $(&apos;#&apos;+item).offset().top; //获取当前id距离顶部距离 if(item == &apos;Home&apos;)&#123; &#125; else if(item == &apos;About&apos;)&#123; $(&apos;html,body&apos;).animate(&#123;scrollTop:top&#125;,1500); &#125; else&#123; $(&apos;html,body&apos;).animate(&#123;scrollTop:top&#125;,2000); //滚动条跳到当前id的位置，完成此操作需要2s &#125;&#125; 这样就会有一个过渡效果并且在2s内完成跳转，然候如果第一次进入这个锚点会有一个动画效果 12345678910111213141516171819202122232425262728293031323334353637383940HTML: &lt;div class=&quot;div_class_item&quot; id = &quot;div_id_item1&quot;&gt;内容&lt;/div&gt;&lt;div class=&quot;div_class_item&quot; id = &quot;div_id_item2&quot;&gt;内容&lt;/div&gt;&lt;div class=&quot;div_class_item&quot; id = &quot;div_id_item3&quot;&gt;内容&lt;/div&gt;需要添加的css：.animate_positive&#123; animation:route 2s; animation-fill-mode:forwards; animation-direction:alternate;&#125;@-webkit-keyframes route&#123; from &#123; margin-left: -60em; &#125; to&#123;margin-left: 0em ; &#125;&#125;@keyframe route&#123; from &#123; margin-left: -60em; &#125; to&#123;margin-left: 0em ; &#125;&#125;js:function loadAnimation(container_Id,aimation_name,offset)&#123; var contain_To_Top,window_ScrooTop,window_height,offset_To_Top; offset_To_Top=$(container_Id).offset().top; ontain_To_Top=eval(offset_To_Top + offset); //字符串相加 window_ScrooTop =$(window).scrollTop(); //窗口滚动高度 window_height=$(window).height();//窗口高度 if(window_ScrooTop + window_height&gt;contain_To_Top)&#123; $((container_Id)).addClass((aimation_name)); &#125;&#125;$(document).ready(function(e)&#123; $(window).scroll(function()&#123; loadAnimation(&quot;#div_id_item3&quot;,&quot;animate_positive&quot;,0); loadAnimation(&quot;#div_id_item2&quot;,&quot;animate_positive&quot;,0); loadAnimation(&quot;#div_id_item1&quot;,&quot;animate_positive&quot;,0); &#125;);&#125;); 码云demo 以上就是做一个简单的jQuery配合vue.js 做的一个过渡效果]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>-jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F06%2F23%2FHello-World%2F</url>
    <content type="text"><![CDATA[前言经过一天的努力终于在github创建了自己的博客，那我就来一篇Hello World吧，分享分享小编的踩过的坑。(此博客是基于安装了node.js以及git哦) 过程小编今天写了一天的js代码，晚上开始配置，看了许多教程，都没能搞明白，所以请教了隔壁大佬，帮小编解决了这些问题。 注册GitHub账号官网创建仓库1.登陆GitHub2.点击创建仓库 3.填写仓库信息仓库名称必须是 用户名+github.io，比如我的username是byAaronLuo，name我的仓库名称就是byAaronLuo.github.io(小编这里偷懒，copy大佬的图片，因为现在真的很晚了。。。) 配置SSH1.设置username 和email : 注意：这里一定要安装git 12git config --global user.name &quot;your GitHub&apos;s username&quot;git config --global user.name &quot;your GitHub&apos;s E-mail&quot; 2生成SSH密钥1ssh-keygen -t rsa -C &quot;your GitHub&apos;s E-mail &quot; 一般这种情况下是不需要密码的，所以一直回车就好 成功后，在C盘用户-&gt;Administrator 文件夹下就会有一个新的文件夹 .ssh，里面就有刚刚创建的ssh密钥文件id_rsa和id_rsa_pub 注：id_rsa文件是私钥，要妥善保管，id_rsa.pub是公钥文件。 3.添加公钥到GitHub点击用户头像，然后再点击Settings选项 在用户设置栏，点击SSH and GPG keys选项，然后点击New SSH key 将 id_rsa.pub 的内容复制到Key 文本框中，再点击Add SSH key 4.测试SSH1ssh -T git@github.com 接下来会显示出下面的确认信息 12345The authenticity of host &apos;github.com (192.30.255.112)&apos; can&apos;t be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? 输入yes然后回车，你会看见 1Hi byAaronLuo! You&apos;ve successfully authenticated, but GitHub does not provide shell access. Hexo安装hexo安装好Node.js环境后，就可以通过node的npm包管理工具安装Hexo，执行以下指令(当然cnpm可以换成npm，这里使用淘宝镜像会更快，因为小编学习vue.js时配置过node.js，无论实在Linux、Pc、Macos 都是很好配置的哦) 1cnpm install hexo-cli -g hexo全局安装一次就够了，后面可以直接使用hexo相关的操作。 创建博客文件夹在此目录下管理自己的博客代码 12mkdir blogcd blog 初始化Hexo1hexo init 安装依赖包1cnpm install 生成静态页面1hexo g 启动本地服务器（在本地的localhost:4000）查看代码1hexo s 上传GitHub 这里小编习惯用git命令上传至仓库 完成上述操作后，在根目录中会出现一个public文件，在终端进入public文件，然后执行以下操作1234git remote add origin &lt;url&gt;git add .git commit -m &quot;ss&quot;git push -u origin master 域名配置现在已经可以通过https://yourname.github.io 来访问自己的博客站点啦。这时可能有人会说了，大家都通过github.io来访问，好没个性，能不能配置用自己的域名来访问自己的站点。答案当然可以。 首先，你得有个自己的域名，如果还没，那就去买个。 1.进域名控制台在解析里面添加一条CNAME记录，指向yourname.github.io即可。 2.打开项目，选择 setting 3.找到GitHub Pages （每次deploy过后都需要修改一次） 这样你就可以通过自己的域名访问了 其他基础命令123456789101112131415hexo new&quot;postName&quot; #新建文章hexo new page&quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo clean #清除生成内容hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #将.deploy目录部署到指定空间hexo help # 查看帮助hexo version #查看Hexo的版本 hexo 命令缩写1234567hexo g：hexo generatehexo c：hexo cleanhexo s：hexo serverhexo d：hexo deploy hexo 命令组合123hexo clean &amp;&amp; hexo g -s #清除、生成、启动hexo clean &amp;&amp; hexo g -d #清除、生成、部署]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
</search>
